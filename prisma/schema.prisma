// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  superAdmin
  user
  creator
}

enum Gender {
  male
  female
}

enum CREATOR_ONBOARDING_STATUS {
  PENDING
  CREATE_MERCHANT_PENDING
  CREATE_MERCHANT_FAILED
  CREATE_BANK_ACCOUNT_PENDING
  CREATE_BANK_ACCOUNT_FAILED
  BANK_VERIFICATION_PENDING
  BANK_VERIFICATION_IN_PROGRESS
  BANK_VERIFICATION_FAILED
  IDENTITY_VERIFICATION_PENDING
  IDENTITY_VERIFICATION_IN_PROGRESS
  IDENTITY_VERIFICATION_FAILED
  ADDITIONAL_REQUIREMENT_PENDING
  ADDITIONAL_REQUIREMENT_IN_PROGRESS
  ADDITIONAL_REQUIREMENT_FAILED
  SUCCESS
}

enum SubscriptionStatus {
  ACTIVE
  PENDING
  CANCELLED
  PAUSED
}

model SubscriptionPlan {
  id                String             @id @default(cuid())
  name              String
  description       String
  tier              String
  price             Float
  duration          Int
  benefits          String
  isActive          Boolean            @default(true)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  isDeleted         Boolean            @default(false)
  userSubscriptions UserSubscription[]
}
 
model UserSubscription {
  id        String             @id @default(cuid())
  userId    String
  planId    String
  startDate DateTime
  endDate   DateTime
  status    SubscriptionStatus @default(PENDING)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  isDeleted Boolean            @default(false)
  plan      SubscriptionPlan   @relation(fields: [planId], references: [id])
  user      User               @relation(fields: [userId], references: [id])
}
 
model Post {
  id          String   @id @default(cuid())
  userId      String
  media       String[]
  title       String
  description String
  isExclusive Boolean  @default(false)
  price       Float?
  metadata    Json
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model User {
  id            String   @id @default(cuid())
  userName      String   @unique
  firstName     String
  lastName      String
  email         String   @unique
  phoneNumber   String?
  dateOfBirth   DateTime
  gender        Gender
  password      String
  profilePic    String?
  bannerImage   String?
  role          Role     @default(user)
  street        String?
  city          String?
  state         String?
  countryCode   String?
  zip           String?

  // email verificqtion fields
  isEmailVerified      Boolean  @default(false)
  emailVerificationExpiry DateTime?

  // OPP Related Fields
  merchantUid   String?
  cocNr        String?
  bankAccountUid String?
  overviewUrl   String?
  oppVerification Json

  posts                   Post[]
  userSubscriptions       UserSubscription[]

  isActive      Boolean  @default(true)
  resetToken    String?  @unique
  resetTokenExpiry DateTime?
  refreshToken  String?  @unique
  refreshTokenExpiry DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  onBoarding    CREATOR_ONBOARDING_STATUS?

  @@map("users")
}
